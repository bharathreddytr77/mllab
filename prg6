import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
y = np.array([1, 3, 2, 4, 3.5, 5, 6, 7, 6.5, 8])

def gaussian_kernel(x, x_query, tau):
    return np.exp(- (x - x_query) ** 2 / (2 * tau ** 2))
    
def locally_weighted_regression(x, y, x_query, tau):
    x_b = np.c_[np.ones(len(x)), x] # Add bias term (Intercept)
    x_query_b = np.array([1, x_query]) # Query point with bias term
    W = np.diag(gaussian_kernel(x, x_query, tau)) # Compute weights
    theta = np.linalg.inv(x_b.T @ W @ x_b) @ x_b.T @ W @ y
    return x_query_b @ theta # Return prediction
    
# Query points for LWR
x_query = np.linspace(1, 10, 100)
tau = 1.0 # Bandwidth parameter
# Compute LWR predictions
y_lwr = np.array([locally_weighted_regression(x, y, x_q, tau) for x_q in x_query])


plt.figure(figsize=(10, 6))
plt.scatter(x, y, color='blue', label='Data Points')
plt.plot(x_query, y_lwr, color='red', label='Locally Weighted Regression')

plt.title("Locally Weighted Regression")
plt.xlabel("X")
plt.ylabel("Y")
plt.legend()
plt.show()
